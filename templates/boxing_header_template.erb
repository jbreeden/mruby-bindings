<%
  concrete_classes = classes
    .reject { |c| c['is_template'] }
-%>
#ifndef MRUBY_<%= module_name %>_BOXING_HEADER
#define MRUBY_<%= module_name %>_BOXING_HEADER

/* MRUBY_BINDING: header */
/* MRUBY_BINDING_END */


/*
 * Boxing declarations
 * -------------------
 *
 * These declarations are enabled by the macros in mruby_<%= module_name %>_classes.h
 */

/*
* Extra wrapper over native pointer to indicate who owns this memory.
* Owner is mruby (it should be garage collected) or C (it shouldn't be).
*/
typedef struct mruby_to_native_ref_ {
  /* If true, indicates that the object should be freed when
   * mruby garbage collects the ruby object containing this pointer.
   * This is set to true when an object is boxed via the `giftwrap`
   * or `gift_{type}_ptr_set` functions.
   */
  unsigned char belongs_to_ruby;

  /* A pointer to the native object */
  void* obj;

  /* For the convenience of the binding writer,
   * the data pointer can be used to associate arbitrary
   * data with a reference to a C object.
   * 
   * Possible uses:
   * - A function pointer to invoke instead of `free` on GC.
   * - A pointer back to the RObject, to be accessed during GC.
   * - etc.
   */
  void* data;
} mruby_to_native_ref;

<% concrete_classes.each do |klass| -%>
/* MRUBY_BINDING: <%= klass['ruby_name'] %>::boxing_decls */
#if BIND_<%= klass['ruby_name'] %>_TYPE
mrb_value
mruby_box_<%= MRubyBindings.type_name_to_id(klass['name']) %>(mrb_state* mrb, <%= klass['name'] %> *unboxed);

mrb_value
mruby_giftwrap_<%= MRubyBindings.type_name_to_id(klass['name']) %>(mrb_state* mrb, <%= klass['name'] %> *unboxed);

void
mruby_set_<%= MRubyBindings.type_name_to_id(klass['name']) %>_data_ptr(mrb_value obj, <%= klass['name'] %> *unboxed);

void
mruby_gift_<%= MRubyBindings.type_name_to_id(klass['name']) %>_data_ptr(mrb_value obj, <%= klass['name'] %> *unboxed);

<%= klass['name'] %> *
mruby_unbox_<%= MRubyBindings.type_name_to_id(klass['name']) %>(mrb_value boxed);
#endif
/* MRUBY_BINDING_END */

<% end -%>
/* MRUBY_BINDING: footer */
/* MRUBY_BINDING_END */

#endif
