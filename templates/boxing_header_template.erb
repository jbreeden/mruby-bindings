<%
  concrete_classes = classes
    .reject { |c| c['is_template'] }
-%>
#ifndef MRUBY_<%= module_name %>_BOXING_HEADER
#define MRUBY_<%= module_name %>_BOXING_HEADER

/*
 * Boxing declarations
 * -------------------
 *
 * These declarations are enabled by the macros in mruby_<%= module_name %>_classes.h
 */

/*
* Extra wrapper over native pointer to indicate who owns this memory.
* (Either mruby, and it should be garage collected, or C, and it shouldn't be)
* Considered using the LSB of the pointer itself, but I don't think I can
* be assured that all memory is word-aligned (especially when C libraries
* implement their own memory management techniques like memory pools)
*/
typedef struct mruby_to_native_ref_ {
  /* If true, indicates that the object should be freed when
   * mruby GC's the ruby object containing this pointer. This
   * is set to true when an object is boxed via the `giftwrap`
   * or `gift_{type}_ptr_set` functions.
   */
  unsigned char belongs_to_ruby;

  /* A pointer to the native object */
  void* obj;

  /* For the convenience of the binding writer,
   * the data pointer can be used to associate arbitrary
   * data with a reference to a C object. This could
   * be a function pointer to invoke instead of `free` on GC,
   * a pointer back to the RObject, or even cast to an integer type
   * and used as a bit field. You get the idea...
   */
  void* data;
} mruby_to_native_ref;

<% concrete_classes.each do |klass| -%>
#if BIND_<%= klass['ruby_name'] %>_TYPE
mrb_value
mruby_box_<%= ID.type_name_to_id(klass['name']) %>(mrb_state* mrb, <%= klass['name'] %> *unboxed);

mrb_value
mruby_giftwrap_<%= ID.type_name_to_id(klass['name']) %>(mrb_state* mrb, <%= klass['name'] %> *unboxed);

void
mruby_set_<%= ID.type_name_to_id(klass['name']) %>_data_ptr(mrb_value obj, <%= klass['name'] %> *unboxed);

void
mruby_gift_<%= ID.type_name_to_id(klass['name']) %>_data_ptr(mrb_value obj, <%= klass['name'] %> *unboxed);

<%= klass['name'] %> *
mruby_unbox_<%= ID.type_name_to_id(klass['name']) %>(mrb_value boxed);
#endif

<% end -%>

#endif
