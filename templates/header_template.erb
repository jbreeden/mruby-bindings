#ifndef <%= module_name %>_HEADER
#define <%= module_name %>_HEADER

/*
 * Header Files
 * ------------
 *
 * These are the header files that defined the
 * classes and functions for which bindings have
 * been generated. If any of these are not needed
 * they should be commented out.
 *
 * TODO: ONLY the filename is inserted here automatically.
 *       If the file is not directly on the include path,
 *       you will need to prepend the relative path.
 */

/* MRUBY_BINDING: pre_includes */
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: includes */
#include <stdlib.h>
#include "mruby.h"
#include "mruby/array.h"
#include "mruby/class.h"
#include "mruby/compile.h"
#include "mruby/data.h"
#include "mruby/string.h"
#include "mruby/value.h"
#include "mruby/variable.h"

<% if conf[:includes] -%>
<%= File.read(conf[:includes]) %>
<% else
     classes.map { |c|
       File.basename(c['file'])
       }.concat(module_functions.map { |f|
         File.basename(f['file'])
       }).concat(macros.map { |m|
         File.basename(m['file'])
       }).uniq.sort.each do |file|
-%>
#include "<%= file %>"
<%  end -%>
<% end -%>

#include "mruby_<%= module_name %>_functions.h"
#include "mruby_<%= module_name %>_classes.h"
#include "mruby_<%= module_name %>_boxing.h"
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: post_includes */
/* MRUBY_BINDING_END */

/*
 * RClass Macros
 * -------------
 *
 * Macros for retrieving the RClass*'s defined by this gem.
 */

/* MRUBY_BINDING: pre_class_macros */
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: class_macros */
#define <%= module_name %>_module(mrb) mrb_module_get(mrb, "<%= module_name %>")
<% classes.each do |klass| -%>
#define <%= klass['ruby_name'] %>_class(mrb) mrb_class_get_under(mrb, <%= module_name %>_module(mrb), "<%= klass['ruby_name'] %>")
<% end -%>
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: post_class_macros */
/* MRUBY_BINDING_END */

/*
 * Class initialization function declarations
 * ------------------------------------------
 */

/* MRUBY_BINDING: pre_class_init_decls */
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: pre_class_init_decls */
<% classes.each do |klass| -%>
#if BIND_<%= klass['ruby_name'] %>_TYPE
void mrb_<%= module_name %>_<%= klass['ruby_name'] %>_init(mrb_state* mrb);
#endif
<% end -%>
/* MRUBY_BINDING_END */

/* MRUBY_BINDING: post_class_init_decls */
/* MRUBY_BINDING_END */

/*
 * Macro definition function declaration
 * -------------------------------------
 */
void mruby_<%= module_name %>_define_macro_constants(mrb_state* mrb);

#endif
