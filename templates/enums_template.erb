#include "mruby_<%= module_name %>.h"

/* MRUBY_BINDING: header */
/* MRUBY_BINDING_END */

void
mruby_<%= module_name %>_define_enum_constants(mrb_state* mrb) {
  struct RClass * <%= module_name %>_module = <%= module_name %>_module(mrb);
  mrb_value <%= module_name %>_mod = mrb_obj_value(<%= module_name %>_module(mrb));

<% enums.sort_by { |e| e['name'] }.each do |enum| -%>
<% enum_module = enum['ruby_name'] -%>
/* MRUBY_BINDING: <%= enum_module %>_enum */
  struct RClass * <%= enum_module %>_module = mrb_define_module_under(mrb, <%= module_name %>_module, "<%= enum_module %>");
  mrb_value <%= enum_module %>_mod = mrb_obj_value(<%= enum_module %>_module);
<%   constants = enum['constants'].uniq
  constants.each do |constant| -%>
  mrb_const_set(mrb, <%= enum_module %>_mod, mrb_intern_lit(mrb, "<%= CTypes.enum_translator.call(constant['name']) %>"), mrb_fixnum_value(<%= constant['name'] %>));
  mrb_const_set(mrb, <%= module_name %>_mod, mrb_intern_lit(mrb, "<%= CTypes.enum_translator.call(constant['name']) %>"), mrb_fixnum_value(<%= constant['name'] %>));
<%   end -%>
/* MRUBY_BINDING_END */

<% end -%>
}

/* MRUBY_BINDING: footer */
/* MRUBY_BINDING_END */
