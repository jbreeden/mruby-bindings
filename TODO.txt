- Need to be more conservative with typedef resolution
- Seriously need all duplicated references to a native type (in ruby land) to point to the same *ruby* object.
    This is an issue when...
    - A field is retrieved twice (since we're boxing every time)
      This is difficult to manage because...
      - C code may change the field, so we don't know when it stops being the same object.
    - A native function returns the same object on multiple invocations (like a hash get called twice)
    We could assume & warn, or maybe check the pointer address. Of course, pointer addresses may be reused.
    We also don't know when a function call may free an object (such as apr_pool_destroy)
- boxing functions should use class retrieving macros

Just Tips & Reminders
---------------------

- Not really a todo... but don't use any string_value_cstr like functions when dealing with buffers (they like to throw when there is a null character)
  + Prefer mrb_string_value_ptr which performs to_s or to_str first
  + More over, mrb_string_value_cstr will crash if you give it something that isn't actually a string
    - Not anymore: https://github.com/mruby/mruby/pull/2852
